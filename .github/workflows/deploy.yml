name: Build and push to ECR

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: ecr_lab_ecs
  ECS_SERVICE: lab-service
  ECS_CLUSTER: cluster_lab_ecs
  ECS_TASK_DEFINITION: lab
  CONTAINER_NAME: exercise
  IMAGE_TAG: ${{ github.run_number }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install AWS CLI
        run: |
          sudo apt-get update && sudo apt-get install -y unzip > /dev/null
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" > /dev/null
          unzip awscliv2.zip > /dev/null
          sudo ./aws/install --update > /dev/null 2>&1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::337918032209:role/api-taller-oidc-github
          aws-region: us-east-1

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        run: |
          ECR_REGISTRY=$(aws sts get-caller-identity --query Account --output text).dkr.ecr.${AWS_REGION}.amazonaws.com
          IMAGE_URI=$ECR_REGISTRY/${ECR_REPOSITORY}:$IMAGE_TAG

          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI

          echo "Image=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: render-container
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
